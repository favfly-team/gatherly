import jsPDF from "jspdf";

/**
 * Generates a professional PDF from chat messages
 * @param {Array} messages - Array of chat messages
 * @param {string} title - Optional title for the PDF
 * @returns {Blob} - Blob containing the PDF
 */
export const generatePDF = async (
  messages,
  title = "Generated by Gatherly"
) => {
  // Initialize PDF document
  const doc = new jsPDF();

  // Set up document dimensions and margins
  const pageWidth = doc.internal.pageSize.getWidth();
  const pageHeight = doc.internal.pageSize.getHeight();
  const margin = 20;
  const maxLineWidth = pageWidth - margin * 2;

  let yPosition = 30;

  // Title
  doc.setFontSize(24);
  doc.setFont(undefined, "bold");
  doc.text(title, margin, yPosition);
  yPosition += 15;

  // Timestamp1
  doc.setFont(undefined, "normal");
  doc.setTextColor(100, 100, 100);
  doc.setFontSize(10);
  const now = new Date();
  doc.text(
    `Generated on ${now.toLocaleDateString()} at ${now.toLocaleTimeString()}`,
    margin,
    yPosition
  );
  yPosition += 5;

  // Add line separator
  doc.setDrawColor(200, 200, 200);
  doc.line(margin, yPosition, pageWidth - margin, yPosition);
  yPosition += 20;

  // Process all messages
  doc.setTextColor(0, 0, 0);
  doc.setFontSize(12);

  // Filter out any messages with ###GATHERLY_DONE### marker and prepare for PDF
  const cleanMessages = messages.map((message) => {
    if (!message || !message.content) return message;

    return {
      ...message,
      content: message.content.replace("###GATHERLY_DONE###", "").trim(),
    };
  });

  cleanMessages.forEach((message) => {
    if (!message || !message.content) return;

    // Check if we need a new page
    if (yPosition > pageHeight - 60) {
      doc.addPage();
      yPosition = 30;
    }

    // Message header with speaker identification
    doc.setFont(undefined, "bold");
    doc.setFontSize(12);
    const speaker = message.role === "user" ? "You:" : "Gatherly:";
    doc.text(speaker, margin, yPosition);
    yPosition += 8;

    // Message content
    doc.setFont(undefined, "normal");
    doc.setFontSize(11);

    // Split text to fit within page width
    const content = message.content || "";
    const splitText = doc.splitTextToSize(content, maxLineWidth);

    splitText.forEach((line) => {
      if (yPosition > pageHeight - 30) {
        doc.addPage();
        yPosition = 30;
      }
      doc.text(line, margin, yPosition);
      yPosition += 6;
    });

    yPosition += 12; // Extra space between messages
  });

  // Add footer on all pages
  const pageCount = doc.getNumberOfPages();
  for (let i = 1; i <= pageCount; i++) {
    doc.setPage(i);
    doc.setFontSize(8);
    doc.setTextColor(150, 150, 150);
    doc.text(
      `Page ${i} of ${pageCount} | Gatherly Chat Transcript`,
      margin,
      pageHeight - 10
    );
  }

  return doc.output("blob");
};

/**
 * Triggers download of chat transcript as PDF
 * @param {Array} messages - Array of chat messages
 * @param {string} filename - Name for the downloaded file
 * @returns {Promise<boolean>} - True if download was successful, false otherwise
 */
export const downloadChatPDF = async (messages, filename = "gatherly-chat") => {
  try {
    const pdfBlob = await generatePDF(messages);
    const url = URL.createObjectURL(pdfBlob);

    // Create temporary link and trigger download
    const link = document.createElement("a");
    link.href = url;
    link.download = `${filename}-${new Date().toISOString().split("T")[0]}.pdf`;
    document.body.appendChild(link);
    link.click();

    // Clean up
    setTimeout(() => {
      URL.revokeObjectURL(url);
      document.body.removeChild(link);
    }, 100);

    return true;
  } catch (error) {
    console.error("Error generating PDF:", error);
    return false;
  }
};
